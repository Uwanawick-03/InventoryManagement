package inventorymanagementkadse242f035;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import common.OpenPdf;
import database.DBConnection;
import java.awt.BorderLayout;
import java.io.FileOutputStream;
import static java.lang.System.nanoTime;
import java.math.BigDecimal;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

public class NewOrder extends javax.swing.JPanel {

    private JPanel container;

    public void setContainer(JPanel container) {
        this.container = container;
    }

    private int customerPk = 0;
    private int itemPk = 0;
    private double finalTot = 0;
    private String orderId = "";

    public NewOrder() {
        initComponents();
        Helper.loadBranchesIntoComboBox(comBoxBranch);
    }

    public void loadForm() {
        txtCustName.setEditable(false);
        txtCustPhone.setEditable(false);
        txtCustEmail.setEditable(false);
        comBoxBranch.setEnabled(false);

        txtItemName.setEditable(false);
        txtItemQty.setEditable(true);
        txtItemPrice.setEditable(false);
    }

    private void clearItemForm() {
        itemPk = 0;

        txtItemName.setText("");
        txtItemQty.setText("");
        txtItemPrice.setText("");

    }
    

    public String getUniqueId(String prefix) {
        return prefix + nanoTime();
    }

    public void loadCustomerData() {
        System.out.println("Loding customer data");
        DefaultTableModel model = (DefaultTableModel) tableCustomerList.getModel();
        model.setRowCount(0);

        try {
            Connection con = DBConnection.DBHelper.getConnection();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM customer");

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("Cust_Id"),
                    rs.getString("Cust_Name"),
                    rs.getString("Phone"),
                    rs.getString("Email"),
                    rs.getString("Branch_Name")

                });

            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    public void loadItemData() {
        System.out.println("Loading Item data");

        DefaultTableModel model = (DefaultTableModel) tableItemList.getModel();
        model.setRowCount(0); // Clear previous rows

        try {
            Connection con = DBConnection.DBHelper.getConnection();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT item.Item_Id, item.Item_Name, item.Price, item.Qty FROM item");

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("Item_Id"),
                    rs.getString("Item_Name"),
                    rs.getString("Price"),
                    rs.getString("Qty")
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCustomerList = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtCustName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtCustPhone = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtCustEmail = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableItemList = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        txtItemName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtItemPrice = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtItemQty = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        comBoxBranch = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableCart = new javax.swing.JTable();
        btnSaveOrder = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        btnAddToCart = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        lblFinalTot = new javax.swing.JLabel();

        setBackground(new java.awt.Color(140, 148, 156));

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei", 0, 24)); // NOI18N
        jLabel1.setText("New Order");

        jScrollPane1.setPreferredSize(new java.awt.Dimension(1000, 300));

        tableCustomerList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Customer Name", "Phone Number", "Email", "Branch"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCustomerList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCustomerListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableCustomerList);
        if (tableCustomerList.getColumnModel().getColumnCount() > 0) {
            tableCustomerList.getColumnModel().getColumn(0).setResizable(false);
            tableCustomerList.getColumnModel().getColumn(0).setPreferredWidth(50);
            tableCustomerList.getColumnModel().getColumn(1).setResizable(false);
            tableCustomerList.getColumnModel().getColumn(2).setResizable(false);
            tableCustomerList.getColumnModel().getColumn(3).setResizable(false);
            tableCustomerList.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel2.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        jLabel2.setText("Customer Name");

        txtCustName.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        txtCustName.setPreferredSize(new java.awt.Dimension(200, 28));

        jLabel3.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        jLabel3.setText("Phone Number");

        txtCustPhone.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        txtCustPhone.setPreferredSize(new java.awt.Dimension(200, 28));

        jLabel4.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        jLabel4.setText("Email");

        txtCustEmail.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        txtCustEmail.setPreferredSize(new java.awt.Dimension(200, 28));

        jLabel5.setFont(new java.awt.Font("Microsoft YaHei", 0, 18)); // NOI18N
        jLabel5.setText("Customer List");

        jLabel6.setFont(new java.awt.Font("Microsoft YaHei", 0, 18)); // NOI18N
        jLabel6.setText("Item List");

        jScrollPane2.setPreferredSize(new java.awt.Dimension(1000, 300));

        tableItemList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Item Name", "Price", "Qty"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableItemList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableItemListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableItemList);
        if (tableItemList.getColumnModel().getColumnCount() > 0) {
            tableItemList.getColumnModel().getColumn(0).setResizable(false);
            tableItemList.getColumnModel().getColumn(0).setPreferredWidth(50);
            tableItemList.getColumnModel().getColumn(1).setResizable(false);
            tableItemList.getColumnModel().getColumn(1).setPreferredWidth(150);
            tableItemList.getColumnModel().getColumn(2).setResizable(false);
            tableItemList.getColumnModel().getColumn(2).setPreferredWidth(150);
            tableItemList.getColumnModel().getColumn(3).setResizable(false);
            tableItemList.getColumnModel().getColumn(3).setPreferredWidth(150);
        }

        jLabel7.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        jLabel7.setText("Item Name");

        txtItemName.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        txtItemName.setPreferredSize(new java.awt.Dimension(200, 28));

        jLabel8.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        jLabel8.setText("Price");

        txtItemPrice.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        txtItemPrice.setPreferredSize(new java.awt.Dimension(200, 28));

        jLabel9.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        jLabel9.setText("Quantity");

        txtItemQty.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        txtItemQty.setPreferredSize(new java.awt.Dimension(200, 28));

        jLabel10.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        jLabel10.setText("Branch");

        comBoxBranch.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        comBoxBranch.setPreferredSize(new java.awt.Dimension(200, 28));

        jLabel11.setFont(new java.awt.Font("Microsoft YaHei", 0, 18)); // NOI18N
        jLabel11.setText("Cart");

        jScrollPane3.setPreferredSize(new java.awt.Dimension(1000, 300));

        tableCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item_Id", "Item_Name", "Qty", "Price", "Sub_Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCartMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableCart);
        if (tableCart.getColumnModel().getColumnCount() > 0) {
            tableCart.getColumnModel().getColumn(0).setResizable(false);
            tableCart.getColumnModel().getColumn(0).setPreferredWidth(50);
            tableCart.getColumnModel().getColumn(1).setResizable(false);
            tableCart.getColumnModel().getColumn(2).setResizable(false);
            tableCart.getColumnModel().getColumn(3).setResizable(false);
            tableCart.getColumnModel().getColumn(4).setResizable(false);
        }

        btnSaveOrder.setBackground(new java.awt.Color(4, 61, 142));
        btnSaveOrder.setFont(new java.awt.Font("Microsoft YaHei", 1, 16)); // NOI18N
        btnSaveOrder.setForeground(new java.awt.Color(255, 255, 255));
        btnSaveOrder.setText("Save Order");
        btnSaveOrder.setBorder(null);
        btnSaveOrder.setPreferredSize(new java.awt.Dimension(111, 29));
        btnSaveOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveOrderActionPerformed(evt);
            }
        });

        btnReset.setBackground(new java.awt.Color(4, 61, 142));
        btnReset.setFont(new java.awt.Font("Microsoft YaHei", 1, 16)); // NOI18N
        btnReset.setForeground(new java.awt.Color(255, 255, 255));
        btnReset.setText("Reset");
        btnReset.setBorder(null);
        btnReset.setPreferredSize(new java.awt.Dimension(89, 29));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnClose.setBackground(new java.awt.Color(4, 61, 142));
        btnClose.setFont(new java.awt.Font("Microsoft YaHei", 1, 16)); // NOI18N
        btnClose.setForeground(new java.awt.Color(255, 255, 255));
        btnClose.setText("Close");
        btnClose.setBorder(null);
        btnClose.setPreferredSize(new java.awt.Dimension(89, 29));
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnAddToCart.setBackground(new java.awt.Color(4, 61, 142));
        btnAddToCart.setFont(new java.awt.Font("Microsoft YaHei", 1, 16)); // NOI18N
        btnAddToCart.setForeground(new java.awt.Color(255, 255, 255));
        btnAddToCart.setText("Add To Cart");
        btnAddToCart.setBorder(null);
        btnAddToCart.setPreferredSize(new java.awt.Dimension(89, 29));
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        jLabel12.setText("Final Total :");

        lblFinalTot.setFont(new java.awt.Font("Microsoft YaHei", 0, 16)); // NOI18N
        lblFinalTot.setText("00.00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(408, 408, 408))
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9))
                                .addGap(69, 69, 69)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtItemPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtItemQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel10))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comBoxBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtCustEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtCustName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtCustPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(btnAddToCart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSaveOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblFinalTot)))))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addGap(0, 0, 0)
                .addComponent(jLabel5)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtCustName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtCustPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtCustEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comBoxBranch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))))
                .addGap(10, 10, 10)
                .addComponent(jLabel6)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtItemPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtItemQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddToCart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jLabel11)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(lblFinalTot))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSaveOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tableCustomerListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCustomerListMouseClicked
        int index = tableCustomerList.getSelectedRow();

        if (index >= 0) {
            TableModel model = tableCustomerList.getModel();

            String id = model.getValueAt(index, 0).toString();
            customerPk = Integer.parseInt(id);

            String custName = model.getValueAt(index, 1).toString();
            txtCustName.setText(custName);

            String custPhone = model.getValueAt(index, 2).toString();
            txtCustPhone.setText(custPhone);

            String custEmail = model.getValueAt(index, 3).toString();
            txtCustEmail.setText(custEmail);

            String branch = model.getValueAt(index, 4).toString();
            comBoxBranch.setSelectedItem(branch);

            btnSaveOrder.setEnabled(true);
        }
    }//GEN-LAST:event_tableCustomerListMouseClicked

    private void tableItemListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableItemListMouseClicked
        int index = tableItemList.getSelectedRow();

        if (index >= 0) {
            TableModel model = tableItemList.getModel();

            String id = model.getValueAt(index, 0).toString();
            itemPk = Integer.parseInt(id);

            String itemName = model.getValueAt(index, 1).toString();
            txtItemName.setText(itemName);

            String itemPrice = model.getValueAt(index, 2).toString();
            txtItemPrice.setText(itemPrice);

        }
    }//GEN-LAST:event_tableItemListMouseClicked

    private void tableCartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCartMouseClicked
        int index = tableCart.getSelectedRow();
        int a = JOptionPane.showConfirmDialog(null, "Do You Want To Remove This Item?", "Select", JOptionPane.YES_NO_OPTION);
        if (a == 0) {
            TableModel model = tableCart.getModel();
            String total = model.getValueAt(index, 4).toString();
            finalTot = finalTot - Double.parseDouble(total);
            lblFinalTot.setText(String.valueOf(finalTot));
            ((DefaultTableModel) tableCart.getModel()).removeRow(index);
        }
    }//GEN-LAST:event_tableCartMouseClicked

    private void btnSaveOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveOrderActionPerformed
        if (finalTot != 0 && !txtCustName.getText().equals("")) {
            orderId = getUniqueId("ORD-");

            DefaultTableModel dtm = (DefaultTableModel) tableCart.getModel();
            if (tableCart.getRowCount() != 0) {
                for (int i = 0; i < tableCart.getRowCount(); i++) {
                    try {
                        Connection con = DBConnection.DBHelper.getConnection();
                        Statement st = con.createStatement();
                        st.executeUpdate("update item set Qty=Qty-" + Integer.parseInt(dtm.getValueAt(i, 2).toString()) + " where Item_Id=" + Integer.parseInt(dtm.getValueAt(i, 0).toString()));

                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e);
                    }
                }
            }

            try {
                SimpleDateFormat myFormat = new SimpleDateFormat("dd-MM-yyyy");
                Calendar cal = Calendar.getInstance();
                Connection con = DBConnection.DBHelper.getConnection();
                PreparedStatement pstmt = con.prepareStatement("insert into orders(Order_Id,Cust_Id,Order_Date,Total_Price) values(?,?,?,?)");
                pstmt.setString(1, orderId);
                pstmt.setInt(2, customerPk);
                pstmt.setString(3, myFormat.format(cal.getTime()));
                pstmt.setDouble(4, finalTot);
                pstmt.executeUpdate();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

            //Creating Document
            com.itextpdf.text.Document doc = new com.itextpdf.text.Document();
            try {
                SimpleDateFormat myFormat = new SimpleDateFormat("dd-MM-YYYY");
                Calendar cal = Calendar.getInstance();
                PdfWriter.getInstance(doc, new FileOutputStream(dao.InventoryUtils.billPath + "" + orderId + ".pdf"));
                doc.open();
                Paragraph projectName = new Paragraph("Inventory Management System\n");
                doc.add(projectName);
                Paragraph startLine = new Paragraph("**********************************************************************************************************************************************************************************");
                doc.add(startLine);
                Paragraph details = new Paragraph("\tOrder ID: " + orderId + "\nDate: " + myFormat.format(cal.getTime()) + "\nTotal Paid: " + finalTot);
                doc.add(details);
                doc.add(startLine);
                PdfPTable tb1 = new PdfPTable(4);
                PdfPCell nameCell = new PdfPCell(new Phrase("Name"));
                PdfPCell quantityCell = new PdfPCell(new Phrase("Quantity"));
                PdfPCell priceCell = new PdfPCell(new Phrase("Price per Unit"));
                PdfPCell subTotalPriceCell = new PdfPCell(new Phrase("Sub Total"));

                BaseColor backgroundColor = new BaseColor(255, 204, 51);
                nameCell.setBackgroundColor(backgroundColor);
                quantityCell.setBackgroundColor(backgroundColor);
                priceCell.setBackgroundColor(backgroundColor);
                subTotalPriceCell.setBackgroundColor(backgroundColor);

                tb1.addCell(nameCell);
                tb1.addCell(quantityCell);
                tb1.addCell(priceCell);
                tb1.addCell(subTotalPriceCell);

                for (int i = 0; i < tableCart.getRowCount(); i++) {
                    tb1.addCell(tableCart.getValueAt(i, 1).toString());
                    tb1.addCell(tableCart.getValueAt(i, 2).toString());
                    tb1.addCell(tableCart.getValueAt(i, 3).toString());
                    tb1.addCell(tableCart.getValueAt(i, 4).toString());

                }
                doc.add(tb1);
                doc.add(startLine);
                Paragraph tanksMsg = new Paragraph("Thank You, Come Again.");
                doc.add(tanksMsg);
                OpenPdf.OpenById(orderId);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
            doc.close();
        } else {
            JOptionPane.showMessageDialog(null, "Please add some item to cart or select customer");
        }
        System.out.println("Customer: " + txtCustName.getText());

    }//GEN-LAST:event_btnSaveOrderActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        setVisible(true);
        clearItemForm();
        loadCustomerData();
        loadItemData();

    }//GEN-LAST:event_btnResetActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        System.out.println("Loading Order to container");
        Order OrderPanel = new Order();
        container.add(OrderPanel, BorderLayout.CENTER);

        if (container == null) {
            JOptionPane.showMessageDialog(this, "Error: container panel not set!");
            return;
        }
        container.removeAll();
        // Load the customer panel

        container.setLayout(new BorderLayout());
        container.add(OrderPanel, BorderLayout.CENTER);
        // Refresh the panel
        container.revalidate();
        container.repaint();
//        OrderPanel.loadCustomerData();
//        OrderPanel.loadItemData();
//        OrderPanel.loadForm();

    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
        String noOfUnits = txtItemQty.getText();
        if (!noOfUnits.equals("")) {
            String itemName = txtItemName.getText();
            String itemPrice = txtItemPrice.getText();

            double totalPrice = Double.parseDouble(txtItemQty.getText()) * Double.parseDouble(itemPrice);

            int checkStock = 0;
            int checkProductAlreadyExistInCart = 0;

            try {
                Connection con = DBConnection.DBHelper.getConnection();
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery("select * from item where Item_Id =" + itemPk + "");
                while (rs.next()) {
                    if (rs.getInt("Qty") >= Integer.parseInt(noOfUnits)) {
                        checkStock = 1;
                    } else {
                        JOptionPane.showMessageDialog(null, "Product is Out Of Stock. Only " + rs.getInt("Qty") + "Left");
                    }
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
            if (checkStock == 1) {
                DefaultTableModel model = (DefaultTableModel) tableCart.getModel();
                if (tableCart.getRowCount() != 0) {
                    for (int i = 0; i < tableCart.getRowCount(); i++) {
                        if (Integer.parseInt(model.getValueAt(i, 0).toString()) == itemPk) {
                            checkProductAlreadyExistInCart = 1;
                            JOptionPane.showMessageDialog(null, "Product Already Exist In Cart");
                        }
                    }
                }

                if (checkProductAlreadyExistInCart == 0) {
                    model.addRow(new Object[]{
                        itemPk, itemName, noOfUnits, itemPrice, totalPrice
                    });
                    finalTot = finalTot + totalPrice;
                    lblFinalTot.setText(String.valueOf(finalTot));
                    JOptionPane.showMessageDialog(null, "Added Successfully");

                }
                clearItemForm();
            }

        } else {
            JOptionPane.showMessageDialog(null, "No Of Quantity and item field is required");
        }
    }//GEN-LAST:event_btnAddToCartActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSaveOrder;
    private javax.swing.JComboBox<String> comBoxBranch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblFinalTot;
    private javax.swing.JTable tableCart;
    private javax.swing.JTable tableCustomerList;
    private javax.swing.JTable tableItemList;
    private javax.swing.JTextField txtCustEmail;
    private javax.swing.JTextField txtCustName;
    private javax.swing.JTextField txtCustPhone;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtItemPrice;
    private javax.swing.JTextField txtItemQty;
    // End of variables declaration//GEN-END:variables
}
